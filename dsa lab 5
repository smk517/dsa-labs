#include<iostream>
using namespace std;
struct  Node{
	int data;
	Node* next;
	Node* prev;
};
void print_data(Node*head){
	if(head==NULL)
	{
		cout<<"linked list is empty";
	}
	Node* ptr=head;
	while(ptr!=NULL){
		cout<<ptr->data<<" ";
		ptr=ptr->next;
		}	
		
}


	Node*atstart(Node*head,int newvalue){
		Node*temp=new Node();
		temp->prev=NULL;
		temp->data=newvalue;
		temp->next=NULL;
		temp->next=head;
		head->prev=temp;
		head=temp;
		return head;
	
	if (head != NULL) {
        head->prev = temp;
    }
    
    // New head is the temp node
    return temp;
}
int main() {
	 Node  node1, node2, node3,node4;
	cout << "Enter value for Node 1: ";
    cin >> node1.data;
    node1.prev=NULL;
    node1.next = &node2;  
    cout << "Enter value for Node 2: ";
    cin >> node2.data;
    node2.prev=&node1;
    node2.next = &node3; 
    cout << "Enter value for Node 3: ";
    cin >> node3.data;
    node3.prev=&node2;
    node3.next =&node4;    
     cout << "Enter value for Node 4: ";
    cin >> node4.data;
    node4.prev=&node3;
    node4.next = NULL;    
    cout << "Linked list values: ";
    Node* head = &node1;
    Node* prev = &node4;
    
    print_data(head);
    int newvalue;
    cout<<"enter the value to be added"<<endl;
    cin>>newvalue;
   head= atstart(head,newvalue);
	cout<<"the link list after adding node at start"<<endl;
	    print_data(head);
    return 0;
}
	
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* prev;
    Node* next;
};

// Function to print the doubly linked list
void print_data(Node* head) {
    Node* temp = head;
    while (temp != NULL) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

int main() {
    // Creating 4 nodes
    Node node1, node2, node3, node4;

    node1.data = 10; node1.prev = NULL; node1.next = &node2;
    node2.data = 20; node2.prev = &node1; node2.next = &node3;
    node3.data = 30; node3.prev = &node2; node3.next = &node4;
    node4.data = 60; node4.prev = &node3; node4.next = NULL;

    Node* head = &node1;

    cout << "Original doubly linked list: ";
    print_data(head);

    // Taking position from user
    int position;
    cout << "Enter position to delete: ";
    cin >> position;

    // Counting the number of nodes
    Node* temp = head;
    int count = 0;
    while (temp != NULL) {
        count++;
        temp = temp->next;
    }

    // Validate position (not start or end)
    if (position < 2 || position >= count) {
        cout << "Invalid position!" << endl;
        return 0;
    }

    // Finding the node before the deletion point
    Node* ptr = head;
    for (int i = 1; i < position - 1; i++) {
        ptr = ptr->next;
    }

    // Deleting the node
    Node* to_delete = ptr->next;
    ptr->next = to_delete->next;  
    if (to_delete->next != NULL) { 
        to_delete->next->prev = ptr;  // Update previous pointer of the next node
    }

    // Printing the updated linked list
    cout << "Doubly linked list after deletion: ";
    print_data(head);

    return 0;
}

