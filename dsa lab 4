#include<iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

void print_data(Node* head) {
    if (head == NULL) {
        cout << "Linked list is empty";
        return;
    }
    Node* ptr = head;
    while (ptr != NULL) {
        cout << ptr->data << " ";
        ptr = ptr->next;
    }
    cout << endl;
}

Node* at_end(Node* head, int newvalue) {
    Node* ptr = new Node();
    ptr->data = newvalue;
    ptr->next = NULL;
    
    if (head == NULL) {
        return ptr;
    }
    
    Node* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = ptr;
    
    return head;
}

int main() {
    int newvalue;
    Node node1, node2, node3, node4;
    node1.data = 10;
    node1.next = &node2;
    node2.data = 20;
    node2.next = &node3;
    node3.data = 30;
    node3.next = &node4;
    node4.data = 40;
    node4.next = NULL;
    
    Node* head = &node1;
    
    cout << "Enter the new value to insert at the end:" << endl;
    cin >> newvalue;
    
    head = at_end(head, newvalue);
    
    cout << "Linked list values after insertion are:" << endl;
    print_data(head);
    
    return 0;
}

#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

void print_data(Node* head) {
    if (head == NULL) {
        cout << "Linked list is empty";
        return;
    }
    Node* ptr = head;
    while (ptr != NULL) {
        cout << ptr->data << " ";
        ptr = ptr->next;
    }
    cout << endl;
}

Node* delete_at_start(Node* head) {
    if (head == NULL) return NULL;
    Node* temp = head;
    head = head->next;
    delete temp;
    return head;
}

Node* delete_at_position(Node* head, int position) {
    if (head == NULL || position < 1) return head;
    if (position == 1) return delete_at_start(head);
    
    Node* prev = head;
    for (int i = 1; i < position - 1 && prev->next != NULL; i++) {
        prev = prev->next;
    }
    
    if (prev->next == NULL) return head;
    Node* temp = prev->next;
    prev->next = temp->next;
    delete temp;
    return head;
}

Node* delete_at_end(Node* head) {
    if (head == NULL || head->next == NULL) return delete_at_start(head);
    
    Node* prev = head;
    while (prev->next->next != NULL) {
        prev = prev->next;
    }
    delete prev->next;
    prev->next = NULL;
    return head;
}

int main() {
    Node* head = new Node{10, new Node{20, new Node{30, new Node{40, new Node{50, NULL}}}}};
    
    cout << "Original linked list: ";
    print_data(head);
    
    head = delete_at_start(head);
    cout << "After deleting first node: ";
    print_data(head);
    
    head = delete_at_position(head, 4);
    cout << "After deleting node at position 4: ";
    print_data(head);
    
    head = delete_at_end(head);
    cout << "After deleting last node: ";
    print_data(head);
    
    return 0;
}


